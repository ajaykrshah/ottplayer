{"version":3,"sources":["ThemeToggle.js","utils/m3uParser.js","utils/playlistGenerator.js","utils/m3uFetcher.js","StreamList.js","StreamFilter.js","Player.js","App.js","index.js"],"names":["ThemeToggle","_ref","isDarkMode","toggleTheme","_jsxs","className","concat","children","_jsx","type","id","checked","onChange","htmlFor","parseM3UData","data","lines","split","parsedStreams","stream","forEach","line","startsWith","info","match","length","tvgChno","tvgLogo","tvgLanguage","tvgType","groupTitle","name","logoUrl","language","group","parseInt","logo","url","trim","push","CHANNELS_STORAGE_KEY","API_URL","USER_AGENT","CACHE_VALIDITY_PERIOD","async","fetchChannelsJSON","storedData","JSON","parse","localStorage","getItem","genrateDate","Date","getTime","options","method","headers","Accept","response","fetch","ok","Error","status","statusText","responseData","json","setItem","stringify","error","console","message","genreMap","langMap","fetchM3UPlaylist","playlistData","m3u8PlaylistFile","ServerUrl","process","REACT_APP_BASE_URL","resData","channel_name","channel_id","channelCategoryId","channelLanguageId","isCatchupAvailable","channelLogoUrl","channelCategory","channelLanguage","channelInfo","jsonToM3UPlaylist","setStreams","StreamList","streams","handleStreamClick","map","index","onClick","src","alt","StreamFilter","setFilteredStreams","searchTerm","setSearchTerm","useState","useEffect","placeholder","value","e","target","toLowerCase","filtered","filter","nameLower","groupLower","languageLower","includes","Player","selectedStream","handleClosePlayer","ReactPlayer","controls","App","setSelectedStream","filteredStreams","setIsDarkMode","savedTheme","newMode","findIndex","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d9fd3c53.chunk.js","sourcesContent":["// ThemeToggle.js\r\n\r\nimport React from 'react';\r\nimport './ThemeToggle.css'; // Import the CSS for toggle styles\r\n\r\nconst ThemeToggle = ({ isDarkMode, toggleTheme }) => {\r\n  return (\r\n    <div className={`toggle-container ${isDarkMode ? 'dark' : 'light'}`}>\r\n      <input\r\n        type=\"checkbox\"\r\n        className=\"toggle-checkbox\"\r\n        id=\"toggle\"\r\n        checked={isDarkMode}\r\n        onChange={toggleTheme}\r\n      />\r\n      <label className=\"toggle-label\" htmlFor=\"toggle\">\r\n        <span className=\"toggle-ball\"></span>\r\n      </label>\r\n      <p>{isDarkMode ? 'Dark Mode' : 'Light Mode'}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemeToggle;\r\n","const parseM3UData = (data) => {\r\n    const lines = data.split('\\n');\r\n    const parsedStreams = [];\r\n    let stream = null;\r\n  \r\n    lines.forEach((line) => {\r\n      if (line.startsWith('#EXTINF:')) {\r\n        const info = line.match(/#EXTINF:(-?\\d+)(?:\\s+tvg-chno=\"([^\"]*)\")?(?:\\s+tvg-name=\"([^\"]*)\")?(?:\\s+tvg-logo=\"([^\"]*)\")?(?:\\s+tvg-language=\"([^\"]*)\")?(?:\\s+tvg-type=\"([^\"]*)\")?(?:\\s+group-title=\"([^\"]*)\")?.*,(.*)/);\r\n  \r\n        if (info && info.length >= 9) {\r\n          const [, , tvgChno, , tvgLogo, tvgLanguage, tvgType, groupTitle, name] = info;\r\n  \r\n          const logoUrl = tvgLogo || '';\r\n          const language = tvgLanguage || '';\r\n          const type = tvgType || '';\r\n          const group = groupTitle || '';\r\n  \r\n          // Create a new stream object for each entry\r\n          stream = {\r\n            tvgChno: parseInt(tvgChno),\r\n            name,\r\n            logo: logoUrl,\r\n            language,\r\n            type,\r\n            group,\r\n            url: '', // Initialize URL as empty for each stream\r\n          };\r\n        }\r\n      } else if (line.trim() !== '' && !line.startsWith('#')) {\r\n        // Set the URL for the current stream\r\n        if (stream) {\r\n          stream.url = line.trim();\r\n          parsedStreams.push({ ...stream }); // Push a clone of the current stream object into parsedStreams\r\n          stream = null; // Reset the stream object\r\n        }\r\n      }\r\n    });\r\n  \r\n    return parsedStreams;\r\n  };\r\n  \r\n  export default parseM3UData;\r\n  \r\n","const CHANNELS_STORAGE_KEY = \"channels\";\r\nconst API_URL = \"https://jiotv.data.cdn.jio.com/apis/v1.4/getMobileChannelList/get/?os=android&devicetype=phone\";\r\nconst USER_AGENT = \"plaYtv/7.0.8 (Linux;Android 7.1.2) ExoPlayerLib/2.11.7\";\r\nconst CACHE_VALIDITY_PERIOD = 21600000; // 6 hours in milliseconds\r\n\r\nexport async function fetchChannelsJSON() {\r\n  try {\r\n    const storedData = JSON.parse(localStorage.getItem(CHANNELS_STORAGE_KEY) || '{}');\r\n\r\n    if (isCacheValid(storedData)) {\r\n      return storedData;\r\n    }\r\n\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"*/*\",\r\n        \"User-Agent\": USER_AGENT,\r\n      },\r\n    };\r\n\r\n    const response = await fetch(API_URL, options);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const responseData = await response.json();\r\n    responseData[\"genrateDate\"] = new Date().getTime();\r\n    \r\n    localStorage.setItem(CHANNELS_STORAGE_KEY, JSON.stringify(responseData));\r\n    \r\n    return responseData;\r\n  } catch (error) {\r\n    console.error(\"Error fetching channels:\", error.message);\r\n    throw new Error(\"Failed to fetch channels\");\r\n  }\r\n}\r\n\r\nexport function isCacheValid(data) {\r\n  return data && data.genrateDate && (new Date().getTime() - data.genrateDate < CACHE_VALIDITY_PERIOD);\r\n}\r\n\r\nexport async function jsonToM3UPlaylist(){\r\n  var m3u8PlaylistFile = '#EXTM3U  x-tvg-url=\"https://tobalan.github.io/epg.xml.gz\"\\x0a';\r\n  const response = await fetchChannelsJSON();\r\n  const ServerUrl = process.env.REACT_APP_BASE_URL || 'http://192.168.101.30:3500';\r\n\r\n  for (let resData of response[\"result\"]) {\r\n    const { channel_name, channel_id, logoUrl, channelCategoryId, channelLanguageId, isCatchupAvailable } = resData;\r\n    const channelLogoUrl = `https://jiotv.catchup.cdn.jio.com/dare_images/images/${logoUrl}`;\r\n    const channelCategory = genreMap[channelCategoryId];\r\n    const channelLanguage = langMap[channelLanguageId];\r\n\r\n    // if (![1, 6].includes(channelLanguageId)) {\r\n      let channelInfo = `#EXTINF:-1 tvg-chno=\"${channel_id}\" tvg-name=\"${channel_name}\" tvg-logo=\"${channelLogoUrl}\" tvg-language=\"${channelLanguage}\" tvg-type=\"${channelCategory}\" group-title=\"${channelCategory}\"`;\r\n      \r\n      if (isCatchupAvailable) {\r\n        channelInfo += ` catchup=\"vod\" catchup-source=\"${ServerUrl}/catchup/getm3u8/\\${start}/\\${end}/${channel_id}/index.m3u8\" catchup-days=\"7\"`;\r\n      }\r\n      \r\n      channelInfo += `, ${channel_name}\\x20\\x0a${ServerUrl}/getm3u8/${channel_id}/master.m3u8\\x0a`;\r\n      m3u8PlaylistFile += channelInfo;\r\n    // }\r\n  }\r\n  \r\n  return m3u8PlaylistFile;\r\n}\r\n\r\nexport const genreMap = {\r\n    8: \"Sports\",\r\n    5: \"Entertainment\",\r\n    6: \"Movies\",\r\n    12: \"News\",\r\n    13: \"Music\",\r\n    7: \"Kids\",\r\n    9: \"Lifestyle\",\r\n    10: \"Infotainment\",\r\n    15: \"Devotional\",\r\n    0x10: \"Business\",\r\n    17: \"Educational\",\r\n    18: \"Shopping\",\r\n    19: \"JioDarshan\",\r\n};\r\n\r\nexport const langMap = {\r\n    6: \"English\",\r\n    1: \"Hindi\",\r\n    2: \"Marathi\",\r\n    3: \"Punjabi\",\r\n    4: \"Urdu\",\r\n    5: \"Bengali\",\r\n    7: \"Malayalam\",\r\n    8: \"Tamil\",\r\n    9: \"Gujarati\",\r\n    10: \"Odia\",\r\n    11: \"Telugu\",\r\n    12: \"Bhojpuri\",\r\n    13: \"Kannada\",\r\n    14: \"Assamese\",\r\n    15: \"Nepali\",\r\n    16: \"French\",\r\n};","import parseM3UData from './m3uParser';\r\nimport { jsonToM3UPlaylist } from './playlistGenerator';\r\n\r\nconst fetchM3UPlaylist = async (setStreams) => {\r\n  try {\r\n    // Assuming jsonToM3UPlaylist is an asynchronous function, use await here\r\n    const playlistData = await jsonToM3UPlaylist();\r\n    const parsedStreams = parseM3UData(playlistData);\r\n    setStreams(parsedStreams);\r\n  } catch (error) {\r\n    console.error(\"Error fetching or parsing playlist:\", error);\r\n    // Handle error state or inform the user about the issue\r\n  }\r\n};\r\n\r\nexport default fetchM3UPlaylist;\r\n","import React from 'react';\r\n\r\nconst StreamList = ({ streams, handleStreamClick }) => {\r\n  return (\r\n    <div className=\"streams\">\r\n      {streams.map((stream, index) => (\r\n        <div key={index} onClick={() => handleStreamClick(stream.tvgChno)} className=\"stream-card\">\r\n          <img src={stream.logo} alt={stream.name} />\r\n          <h3>{stream.name}</h3>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StreamList;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nconst StreamFilter = ({ streams, setFilteredStreams }) => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Show all streams initially\r\n    setFilteredStreams(streams);\r\n  }, [streams, setFilteredStreams]);\r\n\r\n  const handleSearch = (e) => {\r\n    const searchTerm = e.target.value.toLowerCase();\r\n    setSearchTerm(searchTerm);\r\n\r\n    if (!searchTerm.trim()) {\r\n      // If search term is empty, show all streams\r\n      setFilteredStreams(streams);\r\n    } else {\r\n      const filtered = streams.filter((stream) => {\r\n        const nameLower = stream.name.toLowerCase();\r\n        const groupLower = stream.group.toLowerCase();\r\n        const languageLower = stream.language.toLowerCase();\r\n\r\n        return (\r\n          nameLower.includes(searchTerm) ||\r\n          groupLower.includes(searchTerm) ||\r\n          languageLower.includes(searchTerm)\r\n        );\r\n      });\r\n      setFilteredStreams(filtered);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"filters\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n      {/* Add other filter options if needed */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StreamFilter;\r\n\r\n","import React from 'react';\r\nimport ReactPlayer from 'react-player';\r\n\r\nconst Player = ({ selectedStream, handleClosePlayer }) => {\r\n  return (\r\n    <div>\r\n      <button className=\"close-btn\" onClick={handleClosePlayer}>Close Player</button>\r\n      <ReactPlayer url={selectedStream.url} controls={true} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ThemeToggle from './ThemeToggle';\nimport fetchM3UPlaylist from './utils/m3uFetcher';\nimport StreamList from './StreamList';\nimport StreamFilter from './StreamFilter';\nimport Player from './Player';\n\nconst App = () => {\n  const [streams, setStreams] = useState([]);\n  const [selectedStream, setSelectedStream] = useState(null);\n  const [filteredStreams, setFilteredStreams] = useState([]);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  const toggleTheme = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    // Save the theme preference in localStorage\n    localStorage.setItem('theme', newMode ? 'dark' : 'light');\n  };\n  \n  useEffect(() => {\n    // Get the theme preference from localStorage on component mount.\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setIsDarkMode(savedTheme === 'dark');\n    }\n\n    // Fetch playlistand set it to view.\n    fetchM3UPlaylist(setStreams);\n  }, []);\n\n  const handleStreamClick = (tvgChno) => {\n    const index = streams.findIndex((stream) => stream.tvgChno === tvgChno);\n    setSelectedStream(streams[index]);\n  };\n\n  const handleClosePlayer = () => {\n    setSelectedStream(null);\n  };\n\n\n  return (\n    <div className={isDarkMode ? 'dark-mode' : 'light-mode'}>\n      <div className=\"app-container\">\n        <h1>React M3U Player</h1>\n        <StreamFilter streams={streams} setFilteredStreams={setFilteredStreams} />\n        <ThemeToggle isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n        {selectedStream ? (\n          <Player selectedStream={selectedStream} handleClosePlayer={handleClosePlayer} />\n        ) : (\n          <StreamList streams={filteredStreams} handleStreamClick={handleStreamClick} />\n        )}\n\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}