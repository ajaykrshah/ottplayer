{"version":3,"sources":["ThemeToggle.js","utils/m3uParser.js","utils/playlistGenerator.js","utils/m3uFetcher.js","StreamList.js","StreamFilter.js","Player.js","App.js","index.js"],"names":["ThemeToggle","_ref","isDarkMode","toggleTheme","_jsx","className","children","_jsxs","concat","type","id","checked","onChange","htmlFor","parseM3UData","data","lines","split","parsedStreams","stream","forEach","line","startsWith","info","match","length","tvgChno","tvgLogo","tvgLanguage","tvgType","groupTitle","name","logoUrl","language","group","parseInt","logo","url","trim","push","CHANNELS_STORAGE_KEY","API_URL","USER_AGENT","CACHE_VALIDITY_PERIOD","IMG","async","fetchChannelsJSON","storedData","JSON","parse","localStorage","getItem","genrateDate","Date","getTime","options","method","headers","Accept","response","fetch","ok","Error","status","statusText","responseData","json","setItem","stringify","error","console","message","genreMap","langMap","fetchEPGForChannel","channelInfo","channelData","programmes","day","retryCount","params","URLSearchParams","offset","channel_id","langId","resp","channel_name","epg","eachEPG","pdict","parseEPGData","log","Promise","resolve","setTimeout","timeZone","startEpoch","toLocaleString","endEpoch","srno","showname","description","showCategory","episodePoster","episode_num","director","starCast","episode_desc","fetchM3UPlaylist","playlistData","m3u8PlaylistFile","ServerUrl","process","REACT_APP_BASE_URL","resData","channelCategoryId","channelLanguageId","isCatchupAvailable","channelLogoUrl","channelCategory","channelLanguage","includes","jsonToM3UPlaylist","setStreams","StreamList","streams","handleStreamClick","map","index","onClick","src","alt","StreamFilter","setFilteredStreams","searchTerm","setSearchTerm","useState","selectedLanguage","setSelectedLanguage","selectedGenre","setSelectedGenre","useEffect","filterStreams","search","lang","gen","filtered","filter","nameLower","toLowerCase","groupLower","languageLower","filteredLanguages","placeholder","value","e","target","selectedLang","Object","entries","_ref2","key","selectedGen","_ref3","Player","_dataList$programmes","selectedStream","goBack","dataList","setDataList","listRef","useRef","fetchData","scrollToItem","current","listItem","querySelectorAll","scrollIntoView","behavior","block","scrollToCurrentItem","now","indexToScroll","findIndex","program","IconButton","ArrowBackIcon","ReactPlayer","width","height","controls","playing","ref","icon","title","desc","category","App","setSelectedStream","filteredStreams","setIsDarkMode","savedTheme","newMode","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffd22ee3.chunk.js","sourcesContent":["// ThemeToggle.js\r\n\r\nimport React from 'react';\r\nimport './ThemeToggle.css'; // Import the CSS for toggle styles\r\n\r\nconst ThemeToggle = ({ isDarkMode, toggleTheme }) => {\r\n  return (\r\n    <div className=\"toggle-wrapper\">\r\n      <div className={`toggle-container ${isDarkMode ? 'dark' : 'light'}`}>\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"toggle-checkbox\"\r\n          id=\"toggle\"\r\n          checked={isDarkMode}\r\n          onChange={toggleTheme}\r\n        />\r\n        <label className=\"toggle-label\" htmlFor=\"toggle\">\r\n          <span className=\"toggle-ball\"></span>\r\n        </label>\r\n        <p>{isDarkMode ? 'Dark Mode' : 'Light Mode'}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThemeToggle;\r\n","const parseM3UData = (data) => {\r\n    const lines = data.split('\\n');\r\n    const parsedStreams = [];\r\n    let stream = null;\r\n  \r\n    lines.forEach((line) => {\r\n      if (line.startsWith('#EXTINF:')) {\r\n        const info = line.match(/#EXTINF:(-?\\d+)(?:\\s+tvg-chno=\"([^\"]*)\")?(?:\\s+tvg-name=\"([^\"]*)\")?(?:\\s+tvg-logo=\"([^\"]*)\")?(?:\\s+tvg-language=\"([^\"]*)\")?(?:\\s+tvg-type=\"([^\"]*)\")?(?:\\s+group-title=\"([^\"]*)\")?.*,(.*)/);\r\n  \r\n        if (info && info.length >= 9) {\r\n          const [, , tvgChno, , tvgLogo, tvgLanguage, tvgType, groupTitle, name] = info;\r\n  \r\n          const logoUrl = tvgLogo || '';\r\n          const language = tvgLanguage || '';\r\n          const type = tvgType || '';\r\n          const group = groupTitle || '';\r\n  \r\n          // Create a new stream object for each entry\r\n          stream = {\r\n            tvgChno: parseInt(tvgChno),\r\n            name,\r\n            logo: logoUrl,\r\n            language,\r\n            type,\r\n            group,\r\n            url: '', // Initialize URL as empty for each stream\r\n          };\r\n        }\r\n      } else if (line.trim() !== '' && !line.startsWith('#')) {\r\n        // Set the URL for the current stream\r\n        if (stream) {\r\n          stream.url = line.trim();\r\n          parsedStreams.push({ ...stream }); // Push a clone of the current stream object into parsedStreams\r\n          stream = null; // Reset the stream object\r\n        }\r\n      }\r\n    });\r\n  \r\n    return parsedStreams;\r\n  };\r\n  \r\n  export default parseM3UData;\r\n  ","const CHANNELS_STORAGE_KEY = \"channels\";\r\nconst API_URL = \"https://jiotv.data.cdn.jio.com/apis/v1.4/getMobileChannelList/get/?os=android&devicetype=phone\";\r\nconst USER_AGENT = \"plaYtv/7.0.8 (Linux;Android 7.1.2) ExoPlayerLib/2.11.7\";\r\nconst CACHE_VALIDITY_PERIOD = 21600000; // 6 hours in milliseconds\r\nconst IMG = \"https://jiotv.catchup.cdn.jio.com/dare_images\";\r\n\r\nexport async function fetchChannelsJSON() {\r\n  try {\r\n    const storedData = JSON.parse(localStorage.getItem(CHANNELS_STORAGE_KEY) || '{}');\r\n\r\n    if (isCacheValid(storedData)) {\r\n      return storedData;\r\n    }\r\n\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"*/*\",\r\n        \"User-Agent\": USER_AGENT,\r\n      },\r\n    };\r\n\r\n    const response = await fetch(API_URL, options);\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const responseData = await response.json();\r\n    responseData[\"genrateDate\"] = new Date().getTime();\r\n    \r\n    localStorage.setItem(CHANNELS_STORAGE_KEY, JSON.stringify(responseData));\r\n    \r\n    return responseData;\r\n  } catch (error) {\r\n    console.error(\"Error fetching channels:\", error.message);\r\n    throw new Error(\"Failed to fetch channels\");\r\n  }\r\n}\r\n\r\nexport function isCacheValid(data) {\r\n  return data && data.genrateDate && (new Date().getTime() - data.genrateDate < CACHE_VALIDITY_PERIOD);\r\n}\r\n\r\nexport async function jsonToM3UPlaylist(){\r\n  var m3u8PlaylistFile = '#EXTM3U  x-tvg-url=\"https://tobalan.github.io/epg.xml.gz\"\\x0a';\r\n  const response = await fetchChannelsJSON();\r\n  const ServerUrl = process.env.REACT_APP_BASE_URL || 'http://192.168.101.30:3500';\r\n\r\n\r\n  for (let resData of response[\"result\"]) {\r\n    const { channel_name, channel_id, logoUrl, channelCategoryId, channelLanguageId, isCatchupAvailable } = resData;\r\n    const channelLogoUrl = `https://jiotv.catchup.cdn.jio.com/dare_images/images/${logoUrl}`;\r\n    const channelCategory = genreMap[channelCategoryId];\r\n    const channelLanguage = langMap[channelLanguageId];\r\n\r\n    if ([1, 6, 12].includes(channelLanguageId)) {\r\n      let channelInfo = `#EXTINF:-1 tvg-chno=\"${channel_id}\" tvg-name=\"${channel_name}\" tvg-logo=\"${channelLogoUrl}\" tvg-language=\"${channelLanguage}\" tvg-type=\"${channelCategory}\" group-title=\"${channelCategory}\"`;\r\n      \r\n      if (isCatchupAvailable) {\r\n        channelInfo += ` catchup=\"vod\" catchup-source=\"${ServerUrl}/catchup/getm3u8/\\${start}/\\${end}/${channel_id}/index.m3u8\" catchup-days=\"7\"`;\r\n      }\r\n      \r\n      channelInfo += `, ${channel_name}\\x20\\x0a${ServerUrl}/getm3u8/${channel_id}/master.m3u8\\x0a`;\r\n      m3u8PlaylistFile += channelInfo;\r\n    }\r\n  }\r\n  \r\n  return m3u8PlaylistFile;\r\n}\r\n\r\nexport const genreMap = {\r\n    8: \"Sports\",\r\n    5: \"Entertainment\",\r\n    6: \"Movies\",\r\n    12: \"News\",\r\n    13: \"Music\",\r\n    7: \"Kids\",\r\n    9: \"Lifestyle\",\r\n    10: \"Infotainment\",\r\n    15: \"Devotional\",\r\n    0x10: \"Business\",\r\n    17: \"Educational\",\r\n    18: \"Shopping\",\r\n};\r\n\r\nexport const langMap = {\r\n    6: \"English\",\r\n    1: \"Hindi\",\r\n    2: \"Marathi\",\r\n    3: \"Punjabi\",\r\n    4: \"Urdu\",\r\n    5: \"Bengali\",\r\n    7: \"Malayalam\",\r\n    8: \"Tamil\",\r\n    9: \"Gujarati\",\r\n    10: \"Odia\",\r\n    11: \"Telugu\",\r\n    12: \"Bhojpuri\",\r\n    13: \"Kannada\",\r\n    14: \"Assamese\",\r\n    15: \"Nepali\",\r\n    16: \"French\",\r\n};\r\n\r\nexport const extractChannelName = async ()=>{\r\n  \r\n  // Initialize an empty array to store objects that meet the condition\r\n  let jsonArray = [];\r\n  const response = await fetchChannelsJSON();\r\n  for (let resData of response[\"result\"]) {\r\n       // Check if the channelLanguageId is not in [1, 6]\r\n       if ([1, 6].includes(resData[\"channelLanguageId\"] )) {\r\n        // Create an object based on the condition and push it to the jsonArray\r\n        jsonArray.push({ channel_id: resData[\"channel_id\"], channel_name : resData[\"channel_name\"] });\r\n    }\r\n  };\r\n  return jsonArray;\r\n} \r\n\r\n// Function to fetch EPG data for a channel\r\nexport async function fetchEPGForChannel(channelInfo) {\r\n  // Define API endpoints\r\n  const API = \"https://jiotv.data.cdn.jio.com/apis\";\r\n  const MAX_RETRY = 1;\r\n  const channelData = [];\r\n  const programmes = [];\r\n  // Loop through days for EPG data retrieval\r\n  for (let day = 0; day < 1; day++) {\r\n      let retryCount = 0;\r\n      // Retry fetching data for a channel if unsuccessful\r\n      while (retryCount < MAX_RETRY) {\r\n          try {\r\n\r\n            const params = new URLSearchParams({\r\n              offset: day,\r\n              channel_id: channelInfo.channel_id,\r\n              langId: \"6\"\r\n            });\r\n              // Make an API call to fetch EPG data\r\n              const resp = await fetch(`${API}/v1.3/getepg/get?${params}`);\r\n              const data = await resp.json();\r\n\r\n              // Process EPG data for today (day === 0)\r\n              if (day === 0) {\r\n                  channelData.push({\r\n                      \"@id\": channelInfo.channel_id,\r\n                      \"display-name\": channelInfo.channel_name,\r\n                      \"icon\": {\r\n                          \"@src\": `${IMG}/images/${channelInfo.logoUrl}`\r\n                      }\r\n                  });\r\n              }\r\n\r\n              // Process each EPG entry from the API response\r\n              data.epg.forEach(eachEPG => {\r\n                  const pdict = parseEPGData(eachEPG); // Parse the EPG entry using the parseEPGData function\r\n                  programmes.push(pdict); // Add the parsed data to the programme array\r\n              });\r\n              break; // Break out of the retry loop if successful\r\n          } catch (error) {\r\n              console.log(`Retry failed (Retry Count: ${retryCount + 1}): ${error}`);\r\n              retryCount++;\r\n              // Handle errors and retry after a delay\r\n              if (retryCount === MAX_RETRY) {\r\n                 // errorChannels.push(channelInfo.channel_id);\r\n              } else {\r\n                  await new Promise(resolve => setTimeout(resolve, 2000)); // Retry after waiting for 2 seconds\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  return { channelData, programmes };\r\n}\r\n\r\n\r\n// Function to parse and format each EPG entry\r\nconst parseEPGData = eachEPG => {\r\n  // Initialize the dictionary object to store parsed EPG data\r\n  const options = { timeZone: 'Asia/Kolkata' };\r\n  const pdict = {\r\n      \"@start\": new Date(eachEPG.startEpoch).toLocaleString('en-IN', options),\r\n      \"@stop\": new Date(eachEPG.endEpoch).toLocaleString('en-IN', options),\r\n      \"@channel\": eachEPG.channel_id,\r\n      \"@catchup-id\": eachEPG.srno,\r\n      \"title\": eachEPG.showname,\r\n      \"desc\": eachEPG.description,\r\n      \"category\": eachEPG.showCategory,\r\n      \"icon\": {\r\n          \"@src\": `${IMG}/shows/${eachEPG.episodePoster}`\r\n      }\r\n  };\r\n\r\n  // Include episode number if available\r\n  if (eachEPG.episode_num > -1) {\r\n      pdict[\"episode-num\"] = {\r\n          \"@system\": \"xmltv_ns\",\r\n          \"#text\": `0.${eachEPG.episode_num}`\r\n      };\r\n  }\r\n\r\n  // Include director and actors' information if available\r\n  if (eachEPG.director || eachEPG.starCast) {\r\n      pdict[\"credits\"] = {\r\n          \"director\": eachEPG.director,\r\n          \"actor\": eachEPG.starCast && eachEPG.starCast.split(', ')\r\n      };\r\n  }\r\n\r\n  // Include episode description if available\r\n  if (eachEPG.episode_desc) {\r\n      pdict[\"sub-title\"] = eachEPG.episode_desc;\r\n  }\r\n\r\n  return pdict; // Return the formatted EPG entry\r\n};\r\n","import parseM3UData from './m3uParser';\r\nimport { jsonToM3UPlaylist } from './playlistGenerator';\r\n\r\nconst fetchM3UPlaylist = async (setStreams) => {\r\n  try {\r\n    // Assuming jsonToM3UPlaylist is an asynchronous function, use await here\r\n    const playlistData = await jsonToM3UPlaylist();\r\n    const parsedStreams = parseM3UData(playlistData);\r\n    setStreams(parsedStreams);\r\n  } catch (error) {\r\n    console.error(\"Error fetching or parsing playlist:\", error);\r\n    // Handle error state or inform the user about the issue\r\n  }\r\n};\r\n\r\nexport default fetchM3UPlaylist;\r\n","import React from 'react';\r\n\r\nconst StreamList = ({ streams, handleStreamClick }) => {\r\n  return (\r\n    <div className=\"streams\">\r\n      {streams.map((stream, index) => (\r\n        <div key={index} onClick={() => handleStreamClick(stream.tvgChno)} className=\"stream-card\">\r\n          <img src={stream.logo} alt={stream.name} />\r\n          <h3>{stream.name}</h3>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StreamList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { genreMap, langMap } from './utils/playlistGenerator';\r\nimport './StreamFilter.css'; \r\n\r\nconst StreamFilter = ({ streams, setFilteredStreams }) => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedLanguage, setSelectedLanguage] = useState('');\r\n  const [selectedGenre, setSelectedGenre] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Show all streams initially\r\n    setFilteredStreams(streams);\r\n  }, [streams, setFilteredStreams]);\r\n\r\n  const handleSearch = (e) => {\r\n    const searchTerm = e.target.value.toLowerCase();\r\n    setSearchTerm(searchTerm);\r\n\r\n    filterStreams(searchTerm, selectedLanguage, selectedGenre);\r\n  };\r\n\r\n  const handleLanguageChange = (e) => {\r\n    const selectedLang = e.target.value;\r\n    setSelectedLanguage(selectedLang);\r\n\r\n    filterStreams(searchTerm, selectedLang, selectedGenre);\r\n  };\r\n\r\n  const handleGenreChange = (e) => {\r\n    const selectedGen = e.target.value;\r\n    setSelectedGenre(selectedGen);\r\n\r\n    filterStreams(searchTerm, selectedLanguage, selectedGen);\r\n  };\r\n\r\n  const filterStreams = (search, lang, gen) => {\r\n    let filtered = streams;\r\n\r\n    if (search.trim()) {\r\n      filtered = filtered.filter((stream) => {\r\n        const nameLower = stream.name.toLowerCase();\r\n        const groupLower = stream.group.toLowerCase();\r\n        const languageLower = stream.language.toLowerCase();\r\n\r\n        return (\r\n          nameLower.includes(search) ||\r\n          groupLower.includes(search) ||\r\n          languageLower.includes(search)\r\n        );\r\n      });\r\n    }\r\n\r\n    if (lang !== '') {\r\n      filtered = filtered.filter((stream) => stream.language === lang);\r\n    }\r\n\r\n    if (gen !== '') {\r\n      filtered = filtered.filter((stream) => stream.group === gen);\r\n    }\r\n\r\n    setFilteredStreams(filtered);\r\n  };\r\n\r\n  const filteredLanguages = {\r\n    1: langMap[1], // Hindi\r\n    6: langMap[6], // English\r\n    12: langMap[12], // Bhojpuri\r\n  };\r\n\r\n  return (\r\n    <div className=\"filters\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        value={searchTerm}\r\n        onChange={handleSearch}\r\n      />\r\n\r\n      {/* Language filter dropdown */}\r\n      <select\r\n        value={selectedLanguage}\r\n        onChange={handleLanguageChange}\r\n      >\r\n        <option value=\"\">Select Language</option>\r\n        {Object.entries(filteredLanguages).map(([key, value]) => (\r\n          <option key={key} value={value}>{value}</option>\r\n        ))}\r\n      </select>\r\n\r\n      {/* Genre filter dropdown */}\r\n      <select\r\n        value={selectedGenre}\r\n        onChange={handleGenreChange}\r\n      >\r\n        <option value=\"\">Select Genre</option>\r\n        {Object.entries(genreMap).map(([key, value]) => (\r\n          <option key={key} value={value}>{value}</option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StreamFilter;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport './Player.css';\r\nimport { fetchEPGForChannel } from './utils/playlistGenerator';\r\nimport IconButton from '@material-ui/core/Button';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n\r\nconst Player = ({ selectedStream ,goBack}) => {\r\n  \r\n  const [dataList, setDataList] = useState([]);\r\n  const listRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    // Fetch data from your API endpoint\r\n    const fetchData = async () => {\r\n      try {\r\n        const channelInfo = {\r\n          \"channel_id\": selectedStream.tvgChno,\r\n          \"channel_name\": selectedStream.name.trim(),\r\n          \"logoUrl\": selectedStream.logo\r\n        };\r\n        const data = await fetchEPGForChannel(channelInfo);\r\n        // Set the fetched data to the state variable\r\n        setDataList(data);\r\n      } catch (error) {\r\n        console.error('Error fetching EPG data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const scrollToCurrentItem = () => {\r\n    if (listRef.current && dataList?.programmes) {\r\n      const now = new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' });\r\n\r\n      const indexToScroll = dataList.programmes.findIndex((program) => {\r\n        // Replace with your logic to check if the program is currently airing\r\n        return program[\"@start\"] <= now && program[\"@stop\"] >= now;\r\n      });\r\n\r\n      if (indexToScroll !== -1) {\r\n        scrollToItem(indexToScroll);\r\n      }\r\n    }\r\n  };\r\n\r\n  const scrollToItem = (index) => {\r\n    if (listRef.current && dataList?.programmes && dataList.programmes[index]) {\r\n      const listItem = listRef.current.querySelectorAll('.program-item')[index];\r\n      if (listItem) {\r\n        listItem.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToCurrentItem();\r\n  }, [dataList]); // Update the dependency array as needed\r\n\r\n  return (\r\n    <div id='Player'>\r\n      <IconButton className=\"back-btn\" onClick={goBack}>\r\n        <ArrowBackIcon /> Back\r\n      </IconButton>\r\n      \r\n      <div className=\"container\">\r\n        <div className=\"player-wrapper\">\r\n                <ReactPlayer\r\n                  className=\"react-player\"\r\n                  width=\"100%\"\r\n                  height=\"100%\"\r\n                  url={selectedStream.url}\r\n                  controls={true} playing={true}\r\n                />\r\n        </div>\r\n      \r\n        <div className=\"program-list\" ref={listRef}>\r\n          <ul className=\"scrollable-list\">\r\n            {dataList?.programmes?.map((program, index) => (\r\n              <li key={index} className=\"program-item\">\r\n                <div className=\"program-details\">\r\n                  <img\r\n                    src={program.icon['@src']}\r\n                    alt={program.title}\r\n                    className=\"program-icon\"\r\n                  />\r\n                  <div className=\"program-info\">\r\n                    <h3>{program.title}</h3>\r\n                    <p>{program.desc}</p>\r\n                    <p>Start Date: {program[\"@start\"]}</p>\r\n                    <p>Stop Date: {program[\"@stop\"]}</p>\r\n                    <p>Category: {program.category}</p>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n  \r\n};\r\n\r\nexport default Player;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ThemeToggle from './ThemeToggle';\nimport fetchM3UPlaylist from './utils/m3uFetcher';\nimport StreamList from './StreamList';\nimport StreamFilter from './StreamFilter';\nimport Player from './Player';\nimport { extractChannelName, fetchEPGForChannel } from './utils/playlistGenerator';\nimport ReactPlayer from 'react-player';\nconst App = () => {\n  const [streams, setStreams] = useState([]);\n  const [selectedStream, setSelectedStream] = useState(null);\n  const [filteredStreams, setFilteredStreams] = useState([]);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  const toggleTheme = () => {\n    const newMode = !isDarkMode;\n    setIsDarkMode(newMode);\n    // Save the theme preference in localStorage\n    localStorage.setItem('theme', newMode ? 'dark' : 'light');\n  };\n  \n  useEffect(() => {\n    // Get the theme preference from localStorage on component mount.\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setIsDarkMode(savedTheme === 'dark');\n    }\n\n    // Fetch playlistand set it to view.\n    fetchM3UPlaylist(setStreams);\n  }, []);\n\n  const handleStreamClick = (tvgChno) => {\n    const index = streams.findIndex((stream) => stream.tvgChno === tvgChno);\n    setSelectedStream(streams[index]);\n  };\n\n  return (\n    <div className={isDarkMode ? 'dark-mode' : 'light-mode'}>\n      <div className=\"app-container\">\n        <h1>React M3U Player</h1>\n        <StreamFilter streams={streams} setFilteredStreams={setFilteredStreams} />\n        <ThemeToggle isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n        {selectedStream ? (\n          <Player selectedStream={selectedStream} goBack={() => setSelectedStream(null)}/>\n        ) : (\n          <StreamList streams={filteredStreams} handleStreamClick={handleStreamClick} />\n        )}\n\n      </div>\n    </div>\n  );\n};\n\nconst App2 = () => {\n  const [channelListData, setChannelListData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n          \n        const channelInfo = {\n            \"channel_id\": \"144\",\n            \"channel_name\": \"Colors HD\",\n            \"logoUrl\": \"http://jiotv.catchup.cdn.jio.com/dare_images/images/Colors_HD.png\"\n          };\n          \n      \n        const data = await fetchEPGForChannel(channelInfo);\n        setChannelListData(data);\n      } catch (error) {\n        // Handle errors if necessary\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <h1>Your React App</h1>\n      {/* <ReactPlayer url='http://192.168.101.30:3500/getm3u8/173/master.m3u8' controls={true} playing={true}/> */}\n\n      <div className=\"player-wrapper\">\n        <ReactPlayer\n          className=\"react-player\"\n          url='http://192.168.101.30:3500/getm3u8/173/master.m3u8'\n          width=\"100%\"\n          height=\"100%\"\n          controls // Add other props like controls, playing, etc. as needed\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}